# #!/usr/bin/env ruby

snippet class
${1} class ${2}
{

	${3}

}
endsnippet

snippet method
public ${1} ${2}(${3})
{
	${4}
}
endsnippet

snippet if
if (${1})
{
	${2}
}
endsnippet

snippet foreach
foreach(var ${1} in ${2})
{
	${3}
}
endsnippet

snippet sif
if (${1})
endsnippet

snippet nowc
public class ${1}Specs
{
	public class concern:Observes<${2},${1}>
	{

	}

	public class ${3} : concern
	{

		It should_${4} = () =>
			${5}
			
	}
}
endsnippet

snippet owc
public class ${1} : concern
{

	It should_${2} = () =>
		${3}
		
}
endsnippet

snippet noc
public class ${1}Specs
{
	public class concern:Observes<${1}>
	{

	}

	public class ${2} : concern
	{

		It should_${3} = () =>
			${4}
			
	}
}
endsnippet

snippet oc
public class ${1} : concern
{

	It should_${2} = () =>
		${3}
		
}
endsnippet

snippet nso
public class ${1}Specs
{
	public class concern:Observes
	{

	}

	public class ${2} : concern
	{

		It should_${3} = () =>
			${4}
			
	}
}
endsnippet

snippet so
public class ${1} : concern
{

	It should_${2} = () =>
		${3}
		
}
endsnippet

snippet bddb
Because b = () =>
	${1}
endsnippet


snippet bddc
Establish c = () =>
{
	${1}
};
endsnippet

snippet it
It should_${1} = () =>
	${2};
endsnippet


snippet el
() => ${1}
endsnippet

snippet deps
depends.on<${1}>();
endsnippet

snippet fake
fake.an<${1}>();
endsnippet

snippet ge
>= ${1}
endsnippet

snippet le
<= ${1}
endsnippet

snippet ne
!= ${1}
endsnippet

snippet try
try
{

}
catch (${1} ${2})
{

}
endsnippet

snippet se
ShouldEqual(${1})
endsnippet

snippet out
Console.Out.WriteLine(${1})
endsnippet
