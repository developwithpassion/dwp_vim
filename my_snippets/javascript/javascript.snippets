snippet prot
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) { 
	${0:// body...}
};
endsnippet

snippet cerr
console.error(${1:errors});
${0}
endsnippet

snippet cl
console.log(${1:message});
${0}
endsnippet

snippet #!
#!/usr/bin/env node
${0}
endsnippet

snippet (f
(function(${1:locals}){
 	${0}
 })(${2:imports});
endsnippet

snippet fun
function ${1:function_name}(${2:argument}) {
	${0:// body...}
}
endsnippet

snippet fun;
function ${1:function_name}(${2:argument}) {
	${0:// body...}
};
endsnippet

snippet f
function (${1}) {
	${0}
}
endsnippet

snippet f;
function (${1}) {
	${0}
};
endsnippet

snippet if
if (${1:true}) {
	${0}
}
endsnippet

snippet ife
if (${1:true}) {
	${2}
} else {
	${0}
}
endsnippet

snippet each
${1:target}.each(function(value){
		${0}
		});
endsnippet

snippet eachi
${1:target}.each(function(value, index){
	${0}
});
endsnippet

snippet subclass
var ${1:class_name} = ${2:base_class}.extend({
	${0}
});
endsnippet

snippet ter
${1:/* condition */} ? ${2:a} : ${0:b}
endsnippet

snippet var
var ${1:varname} = ${2:value};${0}
endsnippet

snippet for
for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
	var ${3:v} = $1[$2];${0:}
}
endsnippet

snippet forr
for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
	var ${3:v} = $1[$2];${0:}
}
endsnippet

snippet wh
while (${1:/* condition */}) {
	${0}
}
endsnippet

snippet try
try {
	${1}
} catch (${2:e}) {
	${0:/* handle error */}
}
endsnippet

snippet do
do {
	${0}
} while (${1:/* condition */});
# Object Method
endsnippet

snippet :f
${1:method_name}: function (${2:attribute}) {
	${0}
}${3:,}
endsnippet

snippet timeout
setTimeout(function () {${0}}${2}, ${1:10});
endsnippet

snippet prop
Object.defineProperty(
	${1:object},
	"${2:property}",
	{
		get : function $1_$2_getter() {
		// getter code
		},
		set : function $1_$2_setter(value) {
		// setter code
		},
		value        : ${3:value},
		writeable    : ${4:boolean},
		enumerable   : ${5:boolean},
		configurable : ${0:boolean}
	}
);
endsnippet

snippet rprop
Object.defineProperty(
	${1:object},
	"${2:property}",
	{
	get : function $1_$2_getter() {
	// getter code
	},
	writeable    : false,
	enumerable   : ${5:boolean},
	configurable : false
	}
);
endsnippet

snippet attrib
${1:name}: function(${2:arguments}){
	${0}
},
endsnippet

snippet hack
/**
 *[HACK - ${1:description} (JP - `system("date +%Y-%m-%d")`)]* 
 *
 */
endsnippet
