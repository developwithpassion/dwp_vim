# Prototype
snippet desc
	describe('${1:class_name}', function(){
		${0:body...}
	});

snippet it
	it('${1:test_name}', function(){
		${0:body...}
	});

snippet ee
	expect(${1:actual}).toEqual(${2:value});${0}

snippet eee
	expect(${1:actual}).toBeExactlyEqualTo(${2:value});${0}

snippet ene
	expect(${1:actual}).not.toEqual(${2:value});${0}

snippet eb
	expect(${1:actual}).toBe(${2:value});${0}

snippet enb
	expect(${1:actual}).not.toBe(${2:value});${0}

snippet em
	expect(${1:actual}).toMatch(${2:pattern});${0}

snippet enm
	expect(${1:actual}).not.toMatch(${2:pattern});${0}

snippet ed
	expect(${1:actual}).toBeDefined();${0}

snippet end
	expect(${1:actual}).not.toBeDefined();${0}

snippet et
	expect(${1:actual}).toBeTruthy();${0}

snippet ef
	expect(${1:actual}).toBeFalsy();${0}

snippet ec
	expect(${1:actual}).toContain(${2:value});${0}

snippet enc
	expect(${1:actual}).not.toContain(${2:value});${0}

snippet elt
	expect(${1:actual}).toBeLessThan(${2:value});${0}

snippet enlt
	expect(${1:actual}).not.toBeLessThan(${2:value});${0}

snippet egt
	expect(${1:actual}).toBeGreaterThan(${2:value});${0}

snippet engt
	expect(${1:actual}).toBeGreaterThan(${2:value});${0}

snippet ex
	expect(${1:function}).toThow(${2:exception});${0}

snippet en
	expect(${1:function}).toBeNull();${0}

snippet enn
	expect(${1:function}).not.toBeNull();${0}

snippet bddb
	because(function(){
		${0:body}
	});

snippet bddc
	beforeEach(function(){
		${0:body}
	});

snippet ae
	afterEach(function(){
		${0:body}
	});

